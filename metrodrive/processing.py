# -*- coding: utf-8 -*-
import overpass
import requests
import osrm
import sys
osrm.RequestConfig.host = "router.project-osrm.org"

from viaggio import Viaggio
from punto import Punto
from collector import gpx_to_viaggi


def getDistances(coords,verbose):
    result = osrm.match(coords)
    totalDistance = result["matchings"][0]["distance"]
    distances = [0]
    steps = result["matchings"][0]["legs"]
    for step in steps:
        distances.append(step["distance"])
    if verbose: print "Lunghezza array distanze:",str(len(distances))
    return totalDistance,distances

def fixSpeeds(speeds):
    print speeds
    npunti = len(speeds)
    if speeds[0]<0:
        i = 1
        while i<npunti:
            if speeds[i]<0:
                i = i+1
            else:
                speeds[0] = speeds[i]
                i = npunti
    i=0
    while i<npunti:
        if speeds[i] < 0:
            if i==0: speeds[i] = speeds[i+1]
            if i>0 and i<npunti-1:
                if speeds[i-1] > 0 and speeds[i+1] < 0: speeds[i] = speeds[i-1]
                if speeds[i-1] < 0 and speeds[i+1] > 0: speeds[i] = speeds[i+1]
                if speeds[i-1] > 0 and speeds[i+1] > 0: speeds[i] = max(speeds[i-1],speeds[i+1])
            if i==npunti-1: speeds[i] = speeds[i-1] 
        i = i+1
    print speeds
    return speeds

def getMaxSpeeds(coords,verbose):
    maxspeeds = []
    ncoords = len(coords)
    i=0
    lastperc = 0
    while i<ncoords:
        perc = int(float(i+1)/(ncoords)*100)
        if lastperc!=perc:
            print perc,"%\r",
            sys.stdout.flush()
        tmp = getMaxspeed(coords[i],verbose)
        maxspeeds.append(tmp)
        i = i + 1
        lastperc = perc
    print ""
    #print "Lunghezza array velocità:",str(len(maxspeeds))
    maxspeeds = fixSpeeds(maxspeeds)
    return maxspeeds

def getMaxspeed(coord,verbose):
    #api = overpass.API()
    api = overpass.API(endpoint="http://localhost/api/interpreter")
    query = '(around:10,%s)' % (coord)
    way_query = overpass.WayQuery(query)
    response = api.Get(way_query)
    results = response["features"]
    roads = []
    
    #primo filtraggio: per ogni coordinata assegno una o più strade, eliminando tutto il resto
    for result in results:
        if result["properties"]:
            result = result["properties"]
            if "highway" in result:
                if "motorway" in result["highway"]: roads.append(result)
                if "trunk" in result["highway"]: roads.append(result)
                if "primary" in result["highway"]: roads.append(result)
                if "secondary" in result["highway"]: roads.append(result)
                if "tertiary" in result["highway"]: roads.append(result)
                if "unclassified" in result["highway"]: roads.append(result)
                if "residential" in result["highway"]: roads.append(result)
                
    #se l'array roads non contiene nessuna strada allora non è stata trovata nessuna strada
    if len(roads)==0:
        if verbose: print "Strada non trovata"
        return -2        
    
    #se più di una strada passa il filtraggio, bisogna tenere la più significativa 
    if len(roads)>1:
        mask = []
        for road in roads:
            if "maxspeed" in road: mask.append(road)
        if len(mask)>1 : print "PIU' DI UNA STRADA SOPRAAVVISSUTA AL FILTRAGGIO"#, results
        roads = mask        
    
    
    if len(roads)>0:
        #a questo punto dovrebbe esserci solo un elento all'interno dell'array
        road = roads[0]
        maxspeed = 0
        
        #se c'è il tag "maxspeed" allora prendo direttamente quel valore
        if "maxspeed" in road:
            maxspeed = int(road["maxspeed"])
    
        #se il tipo di "highway" è "residential" o "motorway" allora non serve differenziare tra strada urbana o interurbana
        if maxspeed==0:
            if "residential" in road["highway"]:
                maxspeed = 50
            if "trunk" in road["highway"]:
                maxspeed = 90
            if "motorway" in road["highway"]:
                maxspeed = 130
        
        #se gli if precedenti falliscono allora controllo se la strada è urbana o interurbana (tramite presenza o meno del marciapiede) e poi controllo il tipo di strada (primary, secondary,tertiary o unclassified)
        if maxspeed==0:
            speeds = {
                    "urban" : {"primary" : 50, "secondary" : 50, "tertiary" : 50, "unclassified" : 50}, 
                    "interurban" : {"primary" : 90, "secondary" : 90, "tertiary" : 90, "unclassified" : 70}
                      }
            type = None
            if "sidewalk" in road: type="urban"
            else: type="interurban"
            maxspeed = speeds[type][road["highway"]]
        
        #se nessuno dei filtraggi precedenti trovasse la velocità massima, segnalo il fallimento della ricerca della velocità massima
        if maxspeed==0:
            maxspeed = -1    
        
        if verbose: print road,"Velocità massima:",maxspeed,"km/h"
        return maxspeed
    
    else:
        if verbose: print "Velocità massima non trovata."
        return -1
    
def toOsrmFormat(strCoord):
    coord = strCoord.split(",")
    return (float(coord[1]),float(coord[0]))

def main():
    percorso = ["45.415797350334074,9.26553636245703","45.41588019323612,9.265718752669725","45.41596303601664,9.265944058226951","45.416151314611966,9.266426855849582","45.41624921923352,9.266630703734993","45.41636218589344,9.266952568816748","45.41647515232733,9.26722078971761","45.4166182428194,9.26749973945573","45.41673120874105,9.267767960356592","45.41683664339716,9.268025452421995","45.416919484774525,9.26826148681558","45.4170475121194,9.26848679237281","45.41718307016777,9.268744284438212","45.41729603495948,9.269001776503615","45.41740899952519,9.269280726241735","45.4175069019656,9.269570404815314","45.417860855528154,9.270943695830496","45.41796628807502,9.271147543715907","45.418094313045884,9.271383578109493","45.4182901153818,9.271641070174896","45.418448262926326,9.271812731551233","45.418576286804424,9.272005850600285","45.418726902760625,9.27238135986293","45.41884739523554,9.272649580763794","45.418945295182674,9.272885615157378","45.41905072570465,9.273121649550964","45.419178748217405,9.273454243468178","45.41930677043922,9.273690277861764","45.41946491513628,9.273979956435342","45.4196230593904,9.274301821517096","45.41976614190553,9.274537855910681","45.419871570894806,9.274741703796092","45.42002971400996,9.274688059615201","45.42012008130545,9.274559313582499","45.4202330402214,9.274430567549798","45.42037612119077,9.274258906173461","45.42052673234533,9.274087244796226","45.42069240415172,9.273861939239","45.42082795344975,9.273733193206297","45.42149063422249,9.272885615157378","45.42164877280278,9.272724682616502","45.42179938056244,9.272510105895632","45.421965048634505,9.272306258010222","45.422138246553274,9.272091681289352","45.42223614079439,9.272005850600285","45.42256747388852,9.27160888366672","45.422725609452606,9.27140503578131","45.422921395728174,9.271126086043191","45.4230117583954,9.271008068846847","45.423117181324166,9.270804220961438","45.42320754367802,9.270557457732393","45.4233581472795,9.27023559265064","45.42344850924766,9.269999558257052","45.423568991647116,9.269709879683473","45.42367441353531,9.269398743438076","45.42376477499726,9.269151980209033","45.423885256721746,9.268862301635455","45.424005738189145,9.26860480957005","45.4240810389751,9.268411690520997","45.42417139978621,9.26819711379923","45.42424670035185,9.267971808242002","45.42434459093698,9.267725045012957","45.42443495132625,9.26749973945573","45.42454790160941,9.267328078078494","45.424615671670836,9.267102772521268","45.424721091604496,9.266920382308573","45.42478133147873,9.266748720931338","45.42490934099693,9.26643758468594","45.42498464057828,9.266158634947821","45.425203008795364,9.26561146430884","45.4252557182387,9.265450531767964","45.42533854726398,9.265225226210735","45.425436435955824,9.26497846298169","45.42554938423523,9.264731699751747","45.42566233228865,9.264678055571755","45.42579033980913,9.264951640891693","45.427744300929845,9.268207842635587","45.42784971502095,9.26841705493828","45.427906186774884,9.268497521209166","45.4280793664669,9.268776470946387","45.428158426584815,9.268669182586402","45.42905066880717,9.267601663398436","45.42908078644158,9.267548019217545","45.42914855106121,9.267505103873907","45.429246433146126,9.267376357841208","45.42928031536635,9.26729052715214","45.4293066681906,9.267236882972147","45.4293405503753,9.267151052283978","45.429366903171434,9.267070586013093","45.42939325595462,9.266963297652207","45.429434667447566,9.266759449767696","45.429476078909474,9.26643758468594","45.42948360826252,9.266351753996874","45.429525019689166,9.266335660743236","45.42957772509622,9.266367847251411","45.42958148976641,9.266577059554102","45.42955890174217,9.266759449767696"]
    casaplanet = ["45.409327697474914,9.273690277861764","45.40941054986756,9.273089463042789","45.40968923429723,9.272188240813877","45.409937789520214,9.27127628974861","45.4106005981009,9.27049308471604","45.411436629649046,9.26973133735619","45.412287712116765,9.26889448814363","45.41269441956436,9.268465334700991","45.41320656551632,9.268014723586536","45.413665986610035,9.267596298980255","45.4142459062603,9.267049128341274","45.41464506827427,9.266684347914987","45.41516472780023,9.266180092620537","45.415624132963494,9.265686566161548","45.415970567172714,9.265289599227087","45.4170475121194,9.264302546310008","45.41744665432999,9.263905579375544","45.418026535156194,9.26336913757292","45.41881727214124,9.262639576720346","45.419231463284724,9.262242609785885","45.41966824338165,9.261813456344143","45.41999206092769,9.261513048934209","45.4202330402214,9.261255556868804","45.42085054496777,9.260504538344412","45.421385208255806,9.260268503951723","45.42173160712023,9.260912234115233","45.42225120143157,9.26170616798326","45.42283103291632,9.262671763228521","45.42332049641695,9.26337986640838","45.42377983522728,9.264163071440947","45.42409609912075,9.264688784408111","45.42460061166381,9.26554709129249","45.42506747000131,9.266008431243302","45.425443965847734,9.26504283599804","45.425654802425235,9.264828259276273","45.42583175394474,9.265032107161684","45.42601246981778,9.265359336661616","45.42626095319859,9.265756303596078","45.4265244949828,9.266206914710535","45.42683697864699,9.26672189884134","45.4271456957496,9.26722615413579","45.4275447665747,9.267864519881119","45.427714182581695,9.268164927291055","45.42786100937585,9.26841705493828","45.42819230945815,9.268663818168223","45.42870055012197,9.268036181258353","45.429061962921175,9.267585570143897","45.42937819722216,9.267033035086737","45.429491137614555,9.266351753996874","45.42958525443571,9.26665752582499"]
    casauni = ["45.4093502935941,9.273883396910815","45.410013109069006,9.271136814879549","45.41570697612029,9.265557820128848","45.415526227258816,9.26268249206488","45.41453209817933,9.260322148131717","45.41615884574292,9.257275158690515","45.41986404025966,9.252425724791488","45.42227379238012,9.251095349120838","45.42447260144554,9.248906666564013","45.42649061110833,9.247232968138892","45.429472314232264,9.249164158629416","45.43486307458054,9.255386883544524","45.4408555501026,9.257360989379581","45.44639576524104,9.258905941772001","45.45115268970893,9.257618481444984","45.455758696260716,9.253713185118505","45.4603342256902,9.251395756529876","45.46629389798938,9.25233989410332","45.47426924122462,9.253284031676765","45.482423991144614,9.251309925841708","45.48877244421105,9.251867825317047","45.49373637584939,9.253799015807571","45.497316151970175,9.255429798888159","45.501497282991515,9.256416851806136","45.50718191988256,9.260751301574356","45.51208408222855,9.261738354491435","45.518308912279664,9.261652523803265","45.523029701024086,9.260536724852587","45.52829125987727,9.26637321166959","45.52820106587143,9.268304402160116","45.52768996377327,9.263669544981958","45.5267880075649,9.257189328002346","45.528261195224516,9.254485661315613","45.53027549141637,9.253455693053102","45.53192896422905,9.250301415251913","45.53286090021125,9.248456055449557","45.5340934369865,9.245966965483694","45.53506291339544,9.244218165205863","45.5338679749604,9.242254788207164","45.53207927752797,9.240452343749343","45.52962912064724,9.237920338438945","45.528321324513335,9.236536318587405","45.52708866124025,9.234358364866937","45.52602133341544,9.231944376753782","45.52532229787937,9.230442339705895","45.52454057043254,9.228790098952594","45.524232386433944,9.228124911116367","45.52359346301113,9.227878147887324","45.523382992529704,9.226215178297663","45.52323265598984,9.224938446807004","45.52295453233136,9.22336130790641","45.52309735276025,9.222470814512958","45.5228192284329,9.221698338316749","45.52224794171835,9.221183354185943","45.521248176009266,9.220142657087973","45.52023335806107,9.219252163695419","45.52030853038885,9.218576247023734","45.52058666712785,9.21791105918751","45.52094749111848,9.21750336341759"]
    viaggi = gpx_to_viaggi("gpx_ita/2015085_mod.gpx")
    #print_viaggi(viaggi)
    #print viaggi[2].get_punti()[0]
    viaggio = viaggi[2]
    viaggio.punti = viaggio.punti[25:28] #barbatrucco
    punti = viaggio.get_punti()
    coords = viaggio.getCoords()
    speeds = getMaxSpeeds(coords,False)
    viaggio.setMaxSpeeds(speeds)
    #viaggio.printPunti()
    # i=0
    # for punto in viaggio.punti:
    #     if punto.velocita > punto.maxspeed:
    #         print punto
    #         i = i+1
    # print i,"posizioni oltre il limite di velocità su",len(viaggio.punti),"punti"
    distances = getDistances(viaggio.getCoordsOsrm(),True)
    viaggio = viaggio.setDistances(distances)
    viaggio.printPunti()
    print distances

    #test(casaplanet[:10],True,1)
    #match(casauni)

def get_indici(viaggio):
    pass

def print_viaggi(viaggi):
    i=0
    for viaggio in viaggi:
        print i,"\n",viaggio,"\n"
        i = i+1

def test(percorso,verbose,type):
    print "Lunghezza array coordinate:",str(len(percorso))
    
    if type==1 or type==3:
        maxspeeds = getMaxSpeeds(percorso,verbose)
        print maxspeeds
    
    if type==2 or type==3:
        totalDistance, distances = getDistances(percorso,verbose)
        print totalDistance
        print distances

if __name__ == '__main__':
    main()  